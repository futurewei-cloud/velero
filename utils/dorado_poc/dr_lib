# ==============================================================================================
#         Update dr.cfg to match test set up

. dr.cfg 

pause()
{
echo
echo -n "Hit ENTER when you are ready to $@: "
read ANSWER
}

sanity_check_file_exist()
{
   if [ ! -f "$1" ];then
      echo "ERROR: cannot locate file $1"
      exit
   fi
}

sanity_check_cfg()
{
if [ ! -f dr.cfg ];then
   echo "FATAL: can not locate DR configration file dr.cfg"
   exit
fi

echo
echo "Please confirm the DR configuration in dr.cfg:"
echo
cat dr.cfg

pause "proceed, or CTL-C to quit"
}

sanity_check_cfg

# ==============================================================================================

# High level steps:
# 1. Update app data, establish replication, wait for data to be mirrored
# 2. Split mirror and mount velero PVC
# 3. Reload velero on peer and load backup data
# 4. Restore
#

#echo unique ID: $$

TMPDIR=${BASE}/tmp/$$
PVF=${BASE}/pv-dorado3.yaml
PVCF=${BASE}/pvc-velero.yaml
POD=nginx-dorado1-fs1
BACKUP=vbackup-$$

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
pgreen()
{
   printf "\n${GREEN}$@${NC}\n"
}

pred()
{
   printf "\n${RED}$@${NC}\n"
}

sanity_check()
{
   kubectl get pv
   kubectl get pvc -A
   kubectl get pod -n velero
}

enter_velero()
{
   kubectl -n velero exec -ti `kubectl -n velero get pod | grep "^velero" | awk '{print $1}'` -- /bin/bash $@
}

rest_cleanup()
{
   rm -f .${DORADO_A}* .${DORADO_B}*
}

rest_login()
{
   IP=$1
   if [ ! -f .${IP}.session ];then
      curl -v --insecure -d '{"username":"admin","password":"Admin@storage6","scope":0}' \
         https://${IP}:8088/deviceManager/rest/xx/sessions 2>&1 | grep -e Set-Cookie -e iBaseToken > .${IP}.session
      SESSION=$(grep Set-Cookie .${IP}.session | tail -1 | sed "s/^.*Set-Cookie: \([^;]*\);.*$/\1/g")
      TOKEN=$(grep iBaseToken .${IP}.session | sed "s/^.*iBaseToken\":\"\([^\"]*\)\".*$/\1/g")
      DEVID=$(grep deviceid .${IP}.session | sed "s/^.*deviceid\":\"\([^\"]*\)\".*$/\1/g")
      echo "curl --insecure -b \"${SESSION}\" -H \"iBaseToken=${TOKEN}\" https://${IP}:8088/deviceManager/rest/${DEVID}/\$@" > .${IP}.rest
      chmod a+x .${IP}.rest
   fi
}

get_rep_ids()
{
rest_login ${DORADO_A}
./.${DORADO_A}.rest REPLICATIONPAIR 2>/dev/null | jq -r .data | grep -e \"ID\" -e  LOCALRESNAME > .all_reps.$$

rm -f .reps.$$
kubectl get pv | tail -n +2 | awk '{print $1}' | while read PV;do
   LUN=$(kubectl describe pv $PV | grep VolumeHandle | sed "s/^.*pvc-/pvc-/g;s/ *//g")
   if [ `grep -c $LUN .all_reps.$$` -gt 0 ];then
      REP=$(grep $LUN .all_reps.$$ -B 1 | head -1 | awk -F\" '{print $4}')
      echo $REP >> .reps.$$
   fi
done
}

generate_pv()
{
kubectl get pv `kubectl get pv | grep velero/ | awk '{print $1}'` -o yaml > ${PVF}.tmp
cat ${PVF}.tmp | grep -i -v -e time -e "^  *uid" -e "^  *resourceVersion:" | sed -n '/^status/q;p' > $PVF
sed -i "s/operation:.*/operation: Apply/g" $PVF
}

start_rep()
{
while read REP;do
   echo processing replication pair: $REP
   # TODO: find rest API for: change remote_replication general remote_replication_id=${REP_ID} second_res_access=read_only
   # TODO: find rest API for: change remote_replication synchronize remote_replication_id=${REP_ID}
   ./.${DORADO_A}.rest 
done<.reps.$$
}

stop_rep()
{
while read REP;do
   echo processing replication pair: $REP
   # TODO: find rest API for: change remote_replication split remote_replication_id=${REP_ID}
   # TODO: find rest API for: change remote_replication general remote_replication_id=${REP_ID} second_res_access=read_write
   ./.${DORADO_A}.rest 
done<.reps.$$
}

# Inject some new data into primary site POD
update_primary()
{
   # Inject data into nginx POD
   pgreen "updating application data ..."
   echo "<html>" > /tmp/index.html
   echo "<h1>System log:</h1><BR><BR><pre>" >> /tmp/index.html
   tail -20 /var/log/syslog >> /tmp/index.html
   echo "</pre></html>" >> /tmp/index.html
   kubectl -n vtest cp /tmp/index.html $POD:/usr/share/nginx/html/
   kubectl -n vtest exec -ti $POD -- /bin/bash -c 'sync'
   sleep 3

   # Start a backup
   pred "starting application backup ..."
   kubectl annotate pv "$(kubectl -n vtest get pvc | awk '$3 ~/pvc/ { print $3 }')" tony.io/dr-protected-pv="Huawei-DR-Protected" --overwrite
   /devhub/fksdr/velero.bin.v2 backup create $BACKUP --include-namespaces vtest --storage-location tony-storagelocation --volume-snapshot-locations tony-snapshotlocation
   kubectl -n velero exec -ti `kubectl -n velero get pod | grep "^velero" | awk '{print $1}'` -- /bin/bash -c 'sync'
   pred "waiting backup data flush to storage ..."
   sleep 5
   kubectl -n velero exec -ti `kubectl -n velero get pod | grep "^velero" | awk '{print $1}'` -- /bin/bash -c 'sync'
   pgreen "backup data is ready now."
}

install_remote()
{
ssh $PEER /devhub/fksdr/install.sh
ssh $PEER /devhub/fksdr/velero.bin.v2 plugin add ljtbbt/fksdr-plugin:v2
ssh $PEER /devhub/fksdr/velero.bin.v2 backup-location create tony-storagelocation --provider example.io/object-store-plugin --bucket velero-pvc --credential cloud-credentials=cloud
ssh $PEER /devhub/fksdr/velero.bin.v2 snapshot-location create tony-snapshotlocation --provider example.io/volume-snapshotter-plugin
ssh $PEER kubectl create namespace vtest
ssh $PEER kubectl -n velero patch deploy velero --patch "$(cat /devhub/fksdr/velero.deploy.json)"
}

prepare_remote()
{
ssh $PEER kubectl -n velero rollout restart deployment velero
}

setup_remote()
{
# =================== recreate PVC on peer ===================
ssh $PEER kubectl apply -f $PVF
ssh $PEER kubectl apply -f $PVCF
ssh $PEER 'kubectl -n velero patch deploy velero --patch "$(cat /devhub/fksdr/velero.deploy.json)"'
}

restore()
{
# =================== wait for velero POD to be ready ===================
echo
pred "waiting for remote site service pod to be ready ..."
while true;do
   READY=$(ssh $PEER kubectl -n velero get pod | grep -c "^velero.*Running")
   if [ $READY -eq 1 ];then
      break
   else
      echo -n .
      sleep 1
   fi
done

pgreen "remote site service pod is now ready."
echo
pred "waiting for backup data loading ..."

while true;do
   READY=$(ssh $PEER /devhub/fksdr/velero.bin.v2 backup get | grep -c $BACKUP)
   if [ $READY -eq 1 ];then
      break
   else
      echo -n .
      sleep 1
   fi
done
pgreen "backup data is now available."

pause "start DR restore"
#echo
#echo -n "Hit ENTER when you are ready to start DR restore: "
#read ANSWER
echo "starting restore ..."
ssh $PEER /devhub/fksdr/velero.bin.v2 restore create --from-backup $BACKUP

while true;do
   READY=$(ssh $PEER kubectl -n vtest get pod | grep -c "^nginx.*Running")
   if [ $READY -eq 1 ];then
      break
   else
      echo -n .
      sleep 1
   fi
done
pgreen "application pod is now ready."
}

