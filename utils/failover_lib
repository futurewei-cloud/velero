# ==============================================================================================
#         Update to match test environment, do not change anything else

DORADO_A=10.124.48.45
DORADO_B=10.124.48.11
REP_ID_V=70799022caa80002
REP_ID_D=70799022caa80001
PEER=10.124.48.73

BASE=/devhub/fksdr/dorado_poc

# ==============================================================================================

# High level steps:
# 1. Update app data, establish replication, wait for data to be mirrored
# 2. Split mirror and mount velero PVC
# 3. Reload velero on peer and load backup data
# 4. Restore
#

echo unique ID: $$

TMPDIR=${BASE}/tmp/$$
PVF=${BASE}/pv-dorado3.yaml
PVCF=${BASE}/pvc-velero.yaml
POD=nginx-dorado1-fs1
BACKUP=vbackup-$$

RED='\033[0;31m'
GREEN='\033[0;32m'
NC='\033[0m' # No Color
pgreen()
{
   printf "\n${GREEN}$@${NC}\n"
}

pred()
{
   printf "\n${RED}$@${NC}\n"
}

pause()
{
echo
echo -n "Hit ENTER when you are ready to $@: "
read ANSWER
}

sanity_check()
{
   kubectl get pv
   kubectl get pvc -A
   kubectl get pod -n velero
}

enter_velero()
{
   kubectl -n velero exec -ti `kubectl -n velero get pod | grep "^velero" | awk '{print $1}'` -- /bin/bash $@
}

drun_dev()
{
   DORADO=$1
   shift
   CMD="$@"
   sshpass -p Storage@21st ssh ibc_os_hs@${DORADO} "$CMD" 2>/dev/null
}

drun()
{
   DORADO=$1
   shift
   CMD="$@"
   sshpass -p Admin@storage6 ssh admin@${DORADO} "$CMD" 2>/dev/null
}

get_lun_names()
{
   drun ${DORADO_A} show remote_replication general remote_replication_id=${REP_ID} > lun.info
   LLUN=$(grep 'Local LUN Name' lun.info | awk '{print $(NF)}')
   RLUN=$(grep 'Remote LUN Name' lun.info | awk '{print $(NF)}')
}

generate_pv()
{
kubectl get pv `kubectl get pv | grep velero/ | awk '{print $1}'` -o yaml > ${PVF}.tmp
cat ${PVF}.tmp | grep -i -v -e time -e "^  *uid" -e "^  *resourceVersion:" | sed -n '/^status/q;p' > $PVF
sed -i "s/operation:.*/operation: Apply/g" $PVF
}

start_rep()
{
   drun ${DORADO_A} change remote_replication general remote_replication_id=${REP_ID_V} second_res_access=read_only
   drun ${DORADO_A} change remote_replication synchronize remote_replication_id=${REP_ID_V}
   drun ${DORADO_A} change remote_replication general remote_replication_id=${REP_ID_D} second_res_access=read_only
   drun ${DORADO_A} change remote_replication synchronize remote_replication_id=${REP_ID_D}
}

stop_rep()
{
   drun ${DORADO_A} change remote_replication split remote_replication_id=${REP_ID_V}
   drun ${DORADO_A} change remote_replication general remote_replication_id=${REP_ID_V} second_res_access=read_write
   drun ${DORADO_A} change remote_replication split remote_replication_id=${REP_ID_D}
   drun ${DORADO_A} change remote_replication general remote_replication_id=${REP_ID_D} second_res_access=read_write
}

# Inject some new data into primary site POD
update_primary()
{
   # Inject data into nginx POD
   pgreen "updating application data ..."
   echo "<html>" > /tmp/index.html
   echo "<h1>System log:</h1><BR><BR><pre>" >> /tmp/index.html
   tail -20 /var/log/syslog >> /tmp/index.html
   echo "</pre></html>" >> /tmp/index.html
   kubectl -n vtest cp /tmp/index.html $POD:/usr/share/nginx/html/
   kubectl -n vtest exec -ti $POD -- /bin/bash -c 'sync'
   sleep 3

   # Start a backup
   pred "starting application backup ..."
   kubectl annotate pv "$(kubectl -n vtest get pvc | awk '$3 ~/pvc/ { print $3 }')" tony.io/dr-protected-pv="Huawei-DR-Protected" --overwrite
   /devhub/fksdr/velero.bin.v2 backup create $BACKUP --include-namespaces vtest --storage-location tony-storagelocation --volume-snapshot-locations tony-snapshotlocation
   kubectl -n velero exec -ti `kubectl -n velero get pod | grep "^velero" | awk '{print $1}'` -- /bin/bash -c 'sync'
   pred "waiting backup data flush to storage ..."
   sleep 5
   kubectl -n velero exec -ti `kubectl -n velero get pod | grep "^velero" | awk '{print $1}'` -- /bin/bash -c 'sync'
   pgreen "backup data is ready now."
}

install_remote()
{
ssh $PEER /devhub/fksdr/install.sh
ssh $PEER /devhub/fksdr/velero.bin.v2 plugin add ljtbbt/fksdr-plugin:v2
ssh $PEER /devhub/fksdr/velero.bin.v2 backup-location create tony-storagelocation --provider example.io/object-store-plugin --bucket velero-pvc --credential cloud-credentials=cloud
ssh $PEER /devhub/fksdr/velero.bin.v2 snapshot-location create tony-snapshotlocation --provider example.io/volume-snapshotter-plugin
ssh $PEER kubectl create namespace vtest
ssh $PEER kubectl -n velero patch deploy velero --patch "$(cat /devhub/fksdr/velero.deploy.json)"
}

prepare_remote()
{
ssh $PEER kubectl -n velero rollout restart deployment velero
}

setup_remote()
{
# =================== recreate PVC on peer ===================
ssh $PEER kubectl apply -f $PVF
ssh $PEER kubectl apply -f $PVCF
ssh $PEER 'kubectl -n velero patch deploy velero --patch "$(cat /devhub/fksdr/velero.deploy.json)"'
}

restore()
{
# =================== wait for velero POD to be ready ===================
echo
pred "waiting for remote site service pod to be ready ..."
while true;do
   READY=$(ssh $PEER kubectl -n velero get pod | grep -c "^velero.*Running")
   if [ $READY -eq 1 ];then
      break
   else
      echo -n .
      sleep 1
   fi
done

pgreen "remote site service pod is now ready."
echo
pred "waiting for backup data loading ..."

while true;do
   READY=$(ssh $PEER /devhub/fksdr/velero.bin.v2 backup get | grep -c $BACKUP)
   if [ $READY -eq 1 ];then
      break
   else
      echo -n .
      sleep 1
   fi
done
pgreen "backup data is now available."

pause "start DR restore"
#echo
#echo -n "Hit ENTER when you are ready to start DR restore: "
#read ANSWER
echo "starting restore ..."
ssh $PEER /devhub/fksdr/velero.bin.v2 restore create --from-backup $BACKUP

while true;do
   READY=$(ssh $PEER kubectl -n vtest get pod | grep -c "^nginx.*Running")
   if [ $READY -eq 1 ];then
      break
   else
      echo -n .
      sleep 1
   fi
done
pgreen "application pod is now ready."
}

